#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>
#include <time.h>

#define N 4
int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
          18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
          35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
          52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
          69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
          86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100
          };

void* reduce(void* (f_p)(void*), void *d_p) {
	pthread_t th[N];
    int i;
    for (i = 0; i < N; i++) {
        int* a = malloc(sizeof(int));
        *a = i * (100 / N);
        if (pthread_create(&th[i], NULL, f_p, a) != 0) {
            perror("Failed to create thread");
        }
    }
    int globalSum = 0;
    for (i = 0; i < N; i++) {
        int* r;
        if (pthread_join(th[i], (void**) &r) != 0) {
            perror("Failed to join thread");
        }
        globalSum += *r;
        free(r);
    }
    printf("%d\n",globalSum);
	int* c = &globalSum;
    void* v = c;
	return v;
	
}

void* f_p(void *arg) {
	int index = *(int*)arg;
    int sum = 0;
    for (int j = 0; j < (100 / N); j++) {
        sum += arr[index + j];
    }
    *(int*)arg = sum;
    return arg;
}

int main(int argc, char** argv) {
    clock_t t;
    t = clock();
    printf("Timer starts\n");
	reduce(f_p, arr);
	t = clock() - t;
    double time_taken = ((double)t)/CLOCKS_PER_SEC; // calculate the elapsed time
    printf("The program took %f seconds to execute", time_taken);
	return 0;
}
